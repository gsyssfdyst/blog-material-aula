import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as o,e as r}from"./app.9665585b.js";const i={},s=r('<h1 id="linguagem-de-programacao" tabindex="-1"><a class="header-anchor" href="#linguagem-de-programacao" aria-hidden="true">#</a> Linguagem de programa\xE7\xE3o</h1><p>A linguagem de programa\xE7\xE3o \xE9 uma das bases fundamentais da computa\xE7\xE3o e da tecnologia moderna. Nos dias de hoje, a demanda por solu\xE7\xF5es tecnol\xF3gicas em quase todos os setores da economia tem crescido de forma exponencial, tornando a habilidade de programar uma compet\xEAncia altamente valorizada no mercado de trabalho.</p><p>Existe uma extensa aplicabilidade para as linguagens de programa\xE7\xE3o, desde o desenvolvimento de aplicativos m\xF3veis e desktop, a cria\xE7\xE3o de sites ou sistemas operacionais e softwares corporativos. Al\xE9m disso, muitas linguagens de programa\xE7\xE3o s\xE3o usadas para resolver problemas complexos em \xE1reas como ci\xEAncia de dados, intelig\xEAncia artificial e aprendizado de m\xE1quina.</p><h2 id="o-que-e-linguagem-de-programacao" tabindex="-1"><a class="header-anchor" href="#o-que-e-linguagem-de-programacao" aria-hidden="true">#</a> O que \xE9 Linguagem de Programa\xE7\xE3o?</h2><p>A linguagem de programa\xE7\xE3o \xE9 um m\xE9todo padronizado que permite a cria\xE7\xE3o de um c\xF3digo fonte que pode ser compilado e transformado em um programa de computador ou interpretado, para informar instru\xE7\xF5es de processamento ao computador. \xC9 uma linguagem formal, que segue uma gram\xE1tica e sintaxe espec\xEDficas e \xE9 composta por um conjunto de regras de sem\xE2nticas que permitem especificar quais dados o computador ir\xE1 atuar, como estes dados ser\xE3o armazenados ou transmitidos e quais a\xE7\xF5es devem ser tomadas de acordo com as circunst\xE2ncias.</p><p>As linguagens de programa\xE7\xE3o t\xEAm como principal objetivo permitir que os programadores tenham uma maior produtividade, facilitando a express\xE3o de suas inten\xE7\xF5es em rela\xE7\xE3o ao processamento de dados. Para isso, elas adotam uma sintaxe de n\xEDvel mais alto, que pode ser mais facilmente entendida por programadores humanos. Dessa forma, elas s\xE3o ferramentas importantes para que programadores e engenheiros de software possam escrever programas mais organizados e com maior rapidez.</p><p>Outra importante caracter\xEDstica das linguagens de programa\xE7\xE3o \xE9 a portabilidade. Programas escritos em linguagens de programa\xE7\xE3o s\xE3o menos dependentes de computadores ou ambientes computacionais espec\xEDficos, pois s\xE3o traduzidos para o c\xF3digo de m\xE1quina do computador no qual ser\xE3o executados. Essa propriedade permite que um mesmo programa possa ser executado em diferentes sistemas operacionais e arquiteturas de processadores, desde que haja um compilador adequado para cada plataforma.</p><h2 id="historia" tabindex="-1"><a class="header-anchor" href="#historia" aria-hidden="true">#</a> Hist\xF3ria</h2><p>Ada Lovelace \xE9 amplamente considerada a primeira programadora da hist\xF3ria. Ela nasceu em 1815 na Inglaterra e era filha do famoso poeta Lord Byron. Lovelace foi educada em matem\xE1tica e l\xF3gica por seu tutor William Frend, que a encorajou a desenvolver seu interesse em ci\xEAncia e tecnologia.</p><p>Foi em 1842 que Lovelace traduziu e expandiu um artigo sobre a m\xE1quina anal\xEDtica de Charles Babbage, um engenheiro brit\xE2nico que projetou o que poderia ter sido o primeiro computador mec\xE2nico. Lovelace acrescentou notas extensas ao artigo, nas quais descreveu o algoritmo para a m\xE1quina anal\xEDtica computar a Sequ\xEAncia de Bernoulli o que se tornou conhecido como o primeiro algoritmo destinado a ser executado em uma m\xE1quina, tornando-se a primeira pessoa a escrever um programa de computador.</p><p>O trabalho de Lovelace foi redescoberto no s\xE9culo XX e a linguagem de programa\xE7\xE3o Ada, usada principalmente em sistemas militares, foi nomeada em sua homenagem. Ada \xE9 uma Linguagem de programa\xE7\xE3o estruturada, de tipagem est\xE1tica, imperativa, orientada a objetos e \xE9 uma linguagem de alto n\xEDvel, originada de Pascal, Simula e outras linguagens. Foi originalmente produzida por uma equipe contrata pelo Departamento de Defesa dos Estados Unidos durante a d\xE9cada de 70.</p><h2 id="interpretacao-e-compilacao" tabindex="-1"><a class="header-anchor" href="#interpretacao-e-compilacao" aria-hidden="true">#</a> Interpreta\xE7\xE3o e compila\xE7\xE3o</h2><p>A tradu\xE7\xE3o do c\xF3digo fonte escrito pelo programador pode ocorrer por meio de compila\xE7\xE3o ou interpreta\xE7\xE3o. Em ambos os processos, o c\xF3digo fonte \xE9 traduzido para o c\xF3digo de m\xE1quina.</p><p>No processo de compila\xE7\xE3o, todo o texto do programa \xE9 traduzido para c\xF3digo de m\xE1quina antes da execu\xE7\xE3o. Para isso, \xE9 utilizado um compilador, que \xE9 um programa respons\xE1vel por realizar essa tradu\xE7\xE3o. A vers\xE3o compilada do programa \xE9 armazenada e pode ser executada v\xE1rias vezes sem necessidade de nova compila\xE7\xE3o, o que economiza tempo. Linguagens como Pascal e C utilizam esse processo.</p><figure><img src="https://www.plantuml.com/plantuml/svg/ZLJDZjCm4BxxAKp5OJb4FI1kLTNkIY0aO2ySE5XQUUr9DAmz3hQZhK0yJE700_08UJ7i_6pJRYIIGp8Qp_VD-9jFsOKeVMoiORkdYBr0KgRHm3UngQNshzVAMUjeEtDIEeg5V8JWB1HlrYKQk4DREnyNL2jNXMLbIrl3GO5PMBoWB2Zlp1A-MeO8IuVKxf6CathBM7X0ggMNbciePMFYPpZ4lS6AB53SR5HwWzzkUHymva55IPK1ljgydAej3Bzf_sgi77-RUe8WJf9_GAeQMO5TyGcP35ovN7gNnuDpqcuf2NtZR8r6QkUVOyUJ7uodXvpka8DQmkn96WmWZ8439ZxV7ajKKj1LK988_Aipoimv771-njZBAcWa91wGOdkCYMqTmBQ_A7R4_2gf6EQ8-tnFcmoEfLHnr2wDEchsFaCiQ6oF7fsWJ-rlnsyZMloUBhhYy_BXY989rBMub38DFx2qVpAbTkEQ19ttl5JPzJ0btUpiWzM5UGS-ho8PwCHyU_yLeijtbtpllpKO8JOf_dBPfEh1x2Txnl_aKc6IYrGsKTuylyPxWow2aa4GyDn-kDfaW1H_R8-fSVBW_wSmI0-Pdx6fBNcndLYDZGufKhfVAXjsMtI5CmkPItRL4srFONSo2Z9ykznfFBO3qjtVil_-0m00" alt="uml diagram" loading="lazy"><figcaption>Processo de compila\xE7\xE3o de uma linguagem de programa\xE7\xE3o</figcaption></figure><p>O diagrama acima representa os passos do processo de compila\xE7\xE3o de uma linguagem de programa\xE7\xE3o, come\xE7ando com o c\xF3digo fonte, que \xE9 passado para o compilador. O compilador faz a an\xE1lise l\xE9xica, an\xE1lise sint\xE1tica/sem\xE2ntica e gera o c\xF3digo intermedi\xE1rio n\xE3o otimizado para a arquitetura X. O c\xF3digo intermedi\xE1rio \xE9 ent\xE3o passado para o passo de otimiza\xE7\xE3o. Em seguida, o gerador de c\xF3digo objeto \xE9 usado para gerar o c\xF3digo objeto para a arquitetura X.</p><p>Por fim, \xE9 feita a lincagem com bibliotecas e \xE9 gerado o c\xF3digo de m\xE1quina final para a arquitetura X.</p><p>J\xE1 o processo de interpreta\xE7\xE3o s\xE3o feitos por programas que t\xEAm a capacidade de ler o c\xF3digo fonte de uma linguagem de programa\xE7\xE3o e chamar as instru\xE7\xF5es do sistema operacional. A forma como os interpretadores operam pode variar de acordo com a implementa\xE7\xE3o do programa interpretador. Em algumas situa\xE7\xF5es, o interpretador analisa o c\xF3digo fonte linha por linha e converte-o em c\xF3digo objeto ou bytecode \xE0 medida que executa, enquanto em outros casos, o c\xF3digo fonte \xE9 convertido inteiramente antes da execu\xE7\xE3o.</p><p>Em teoria, \xE9 poss\xEDvel implementar tanto compiladores quanto interpretadores para qualquer linguagem de programa\xE7\xE3o. Entretanto, a escolha entre criar um interpretador ou um compilador depende das necessidades espec\xEDficas da linguagem e do projeto em quest\xE3o.</p><h3 id="maquinas-virtuais" tabindex="-1"><a class="header-anchor" href="#maquinas-virtuais" aria-hidden="true">#</a> M\xE1quinas Virtuais</h3><p>Os compiladores produzem execut\xE1veis espec\xEDficos para um sistema operacional e arquitetura de processador espec\xEDficos. Isso pode ter um impacto significativo para aqueles que desenvolvem sistemas para m\xFAltiplas plataformas.</p><p>Se uma empresa deseja disponibilizar uma aplica\xE7\xE3o para v\xE1rios sistemas operacionais (como Windows, Linux e Mac OS X) e arquiteturas de processador (como Intel, ARM e PowerPC), ela deve criar e manter um c\xF3digo fonte para cada plataforma. Isso pode resultar em custos significativos para a empresa.</p><p>Podemos reduzir os custos e aumentar a efici\xEAncia ao utilizarmos m\xE1quinas virtuais. Em um ambiente com m\xE1quina virtual, quando o c\xF3digo fonte \xE9 compilado, ele \xE9 traduzido para um c\xF3digo na linguagem da m\xE1quina virtual. A linguagem da m\xE1quina virtual tamb\xE9m \xE9 considerada uma linguagem de m\xE1quina. Durante a execu\xE7\xE3o, a m\xE1quina virtual traduz os comandos da linguagem de m\xE1quina virtual para a linguagem de m\xE1quina correspondente \xE0 plataforma utilizada (m\xE1quina hospedeira).</p><figure><img src="https://www.plantuml.com/plantuml/svg/VPBDJWCX58NtF0MTk9t1sHepQJGkR3GnhRhgXe7BbCfVW6drkNm4NqmOZDeQcq0uv7oNUtF2F4JguwWLcdyhDECWf06yUbZUFjwidfPtU1EZ2nU4UBfl1XatOpy6yCoQ22Osp6hY53Mvl0wHAzcJGQgU-hHe_MCvBoC4ickRS_9rGJDfc1evZ5xzwaYqPDu6AsAzbuRRVMXS7kuVEisJMfn4g7CAJX9RkgC5G2YyIEFIy1fhQopRUAi12we289HoaeAoY4MBQS3LzSSxbuF58iU1rmOqNgIdAeICvO2hgxS8BAagqtsBa0SMgHbKyYxFSjTkRJ36Y-Vx2TdkD3g2_gJHJIIymY5NSYXcBysXEILGl2IHQEikJTEd8tTCkwwx_69HkRoe3C_1yEcRbFCJ" alt="uml diagram" loading="lazy"><figcaption> Aplica\xE7\xE3o rodando em JVM.</figcaption></figure><p>Observa-se que o conceito de m\xE1quina virtual \xE9 muito mais abrangente do que o de um interpretador. Conforme o pr\xF3prio nome sugere, uma m\xE1quina virtual \xE9 similar a um &quot;computador fict\xEDcio&quot;: possui todas as caracter\xEDsticas de um computador. Em outras palavras, sua fun\xE7\xE3o \xE9 gerenciar a mem\xF3ria, as threads, a pilha de execu\xE7\xE3o, e outros aspectos relevantes.</p><p>A responsabilidade de implementar a m\xE1quina virtual n\xE3o \xE9 tarefa dos programadores que desenvolvem as aplica\xE7\xF5es que ser\xE3o executados nas m\xE1quinas virtuais. A implementa\xE7\xE3o da m\xE1quina virtual \xE9 responsabilidade dos fornecedores da linguagem de programa\xE7\xE3o. Os maiores exemplos s\xE3o a Oracle JVM (Java Virtual Machine), OpenJDK JVM, Microsoft CLR (Common Language Runtime) e Mono CLR.</p><h2 id="caracteristicas-das-linguagens-de-programacao" tabindex="-1"><a class="header-anchor" href="#caracteristicas-das-linguagens-de-programacao" aria-hidden="true">#</a> Caracter\xEDsticas das linguagens de programa\xE7\xE3o</h2><p>As linguagens de programa\xE7\xE3o s\xE3o usadas para comunicar instru\xE7\xF5es a um computador para que ele possa executar tarefas espec\xEDficas. Existem diversas linguagens de programa\xE7\xE3o dispon\xEDveis, cada uma com suas pr\xF3prias caracter\xEDsticas e finalidades. Algumas das caracter\xEDsticas mais comuns encontradas em linguagens de programa\xE7\xE3o incluem:</p><p><strong>Sintaxe</strong>: a sintaxe de uma linguagem de programa\xE7\xE3o se refere \xE0s regras que determinam como as instru\xE7\xF5es devem ser escritas. Uma sintaxe clara e f\xE1cil de entender \xE9 importante para garantir que os programadores possam escrever c\xF3digos sem erros.</p><p><strong>Tipagem</strong>: a tipagem de uma linguagem de programa\xE7\xE3o se refere ao tipo de dados que pode ser usado em uma vari\xE1vel ou express\xE3o. Algumas linguagens de programa\xE7\xE3o usam tipagem est\xE1tica, o que significa que as vari\xE1veis t\xEAm um tipo fixo que n\xE3o pode ser alterado durante a execu\xE7\xE3o do programa. Outras linguagens usam tipagem din\xE2mica, o que significa que as vari\xE1veis podem ter tipos diferentes durante a execu\xE7\xE3o do programa.</p><p><strong>Paradigma</strong>: o paradigma de programa\xE7\xE3o se refere ao estilo de programa\xE7\xE3o suportado pela linguagem. Algumas das principais paradigmas de programa\xE7\xE3o incluem programa\xE7\xE3o procedural, programa\xE7\xE3o orientada a objetos e programa\xE7\xE3o funcional.</p><p><strong>Efici\xEAncia</strong>: a efici\xEAncia de uma linguagem de programa\xE7\xE3o se refere \xE0 velocidade e ao uso eficiente dos recursos de hardware. Algumas linguagens de programa\xE7\xE3o s\xE3o mais eficientes do que outras para tarefas espec\xEDficas.</p><p><strong>Bibliotecas</strong>: as bibliotecas de uma linguagem de programa\xE7\xE3o s\xE3o cole\xE7\xF5es de fun\xE7\xF5es pr\xE9-constru\xEDdas que podem ser usadas em um programa. Algumas linguagens de programa\xE7\xE3o t\xEAm uma ampla variedade de bibliotecas dispon\xEDveis, o que facilita o desenvolvimento de aplicativos complexos.</p><p><strong>Portabilidade</strong>: a portabilidade de uma linguagem de programa\xE7\xE3o se refere \xE0 facilidade de transferir um programa escrito em uma plataforma para outra. Algumas linguagens de programa\xE7\xE3o s\xE3o mais port\xE1teis do que outras e podem ser usadas em uma ampla variedade de plataformas.</p><p><strong>Suporte</strong>: o suporte de uma linguagem de programa\xE7\xE3o se refere \xE0 quantidade e qualidade de documenta\xE7\xE3o, tutoriais e comunidade de programadores dispon\xEDveis para ajudar os usu\xE1rios a aprender e usar a linguagem.</p><p>Essas s\xE3o apenas algumas das caracter\xEDsticas mais comuns encontradas em linguagens de programa\xE7\xE3o. \xC9 importante escolher a linguagem de programa\xE7\xE3o certa para uma tarefa espec\xEDfica, levando em considera\xE7\xE3o as necessidades e os requisitos do projeto.</p>',36),d=[s];function m(t,n){return e(),o("div",null,d)}const c=a(i,[["render",m],["__file","03_linguagem_programacao.html.vue"]]);export{c as default};
