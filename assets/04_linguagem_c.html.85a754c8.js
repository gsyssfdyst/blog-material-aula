import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c as s,e as n}from"./app.c13f6b84.js";const o={},t=n(`<h1 id="esqueleto-de-um-programa-em-linguagem-c" tabindex="-1"><a class="header-anchor" href="#esqueleto-de-um-programa-em-linguagem-c" aria-hidden="true">#</a> Esqueleto de um programa em linguagem c</h1><p>Todo programa escrito em linguagem C que vier a ser desenvolvido deve possuir o esqueleto mostrado no c\xF3digo-fonte abaixo.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\xC0 primeira vista, esse parece ser um programa f\xFAtil, j\xE1 que sua \xFAnica finalidade \xE9 mostrar na tela uma mensagem dizendo <em>Hello World</em>, fazer uma pausa e terminar o programa. Por\xE9m, ele permite aprender alguns dos conceitos b\xE1sicos da linguagem C</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span><span class="token comment">//declara\xE7\xF5es globais</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span><span class="token comment">//Bibliotecas utilizadas pelo programa</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//inicio do programa</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//escreve uma mensagem na tela de sa\xEDda</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//faz uma pausa antes de terminar o programa</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//retorna o valor 0 para o SO informando que finalizou sem erros</span>
<span class="token punctuation">}</span><span class="token comment">//fim do programa</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="entendendo-o-codigo" tabindex="-1"><a class="header-anchor" href="#entendendo-o-codigo" aria-hidden="true">#</a> Entendendo o c\xF3digo</h2><p>Temos, no in\xEDcio do programa, a regi\xE3o onde s\xE3o feitas as suas declara\xE7\xF5es globais, ou seja, aquelas que s\xE3o v\xE1lidas para todo o programa. No exemplo, o comando <code>#include &lt;nome_da_biblioteca&gt;</code> \xE9 utilizado para declarar as bibliotecas que ser\xE3o utilizadas.</p><div class="custom-container tip"><p class="custom-container-title">Biblioteca</p><p>Uma biblioteca \xE9 um conjunto de fun\xE7\xF5es (peda\xE7os de c\xF3digo) j\xE1 implementados e que podem ser utilizados pelo programador.</p></div><p>No exemplo anterior, duas bibliotecas foram adicionadas ao programa: <code>stdio.h</code> (que cont\xE9m as fun\xE7\xF5es de leitura do teclado e escrita em tela) e <code>stdlib.h</code> (que contem fun\xE7\xF5es de convers\xF5es de tipos e aloca\xE7\xE3o de mem\xF3ria).</p><p>Todo o programa em linguagem C deve conter a fun\xE7\xE3o <code>main()</code>. Essa fun\xE7\xE3o \xE9 respons\xE1vel pelo in\xEDcio da execu\xE7\xE3o do programa, e \xE9 dentro dela que colocamos os comandos que queremos que o programa execute.</p><div class="custom-container tip"><p class="custom-container-title">Chaves</p><p>As chaves definem o in\xEDcio (&quot;{&quot;) e o fim (&quot;}&quot;) de um bloco de comandos/instru\xE7\xF5es.</p></div><p>No exemplo, as chaves definem o in\xEDcio e o fim do programa.</p><p>A fun\xE7\xE3o <code>main()</code> foi definida como uma fun\xE7\xE3o <code>int</code> (ou seja, retorna um valor do tipo inteiro) e, por isso, precisa devolver um valor inteiro. Temos ent\xE3o a necessidade do comando <code>return 0</code> apenas para informar que o programa chegou ao seu final e que est\xE1 tudo OK.</p><p>A fun\xE7\xE3o <code>printf()</code> est\xE1 definida na biblioteca <code>stdio.h</code>. Ela serve para imprimir uma mensagem de texto na tela do terminal.</p><p>O texto a ser escrito deve estar entre aspas duplas, e, dentro dele, podemos tamb\xE9m colocar caracteres especiais, como o &quot;\\n&quot;, que indica que \xE9 para mudar de linha antes de continuar a escrever na tela.</p><p>O comando <code>system(&quot;pause&quot;)</code> serve para interromper a execu\xE7\xE3o do programa (fazer uma pausa) para que se possa analisar a tela de sa\xEDda, ap\xF3s o t\xE9rmino da execu\xE7\xE3o do programa. Ela est\xE1 definida dentro da biblioteca <code>stdlib.h</code>.</p><p>Fim de instru\xE7\xF5es quase sempre termina com ponto e v\xEDrgula(&quot;;&quot;).</p><p>Os par\xEAnteses definem o in\xEDcio (&quot;(&quot;) e o fim (&quot;)&quot;) da lista de argumentos de uma fun\xE7\xE3o. Um argumento \xE9 a informa\xE7\xE3o que ser\xE1 passada para a fun\xE7\xE3o utilizar. No exemplo, podemos ver que os comandos <code>main</code>, <code>printf</code> e <code>system</code> s\xE3o fun\xE7\xF5es.</p><h2 id="indentacao-do-codigo" tabindex="-1"><a class="header-anchor" href="#indentacao-do-codigo" aria-hidden="true">#</a> Indenta\xE7\xE3o do c\xF3digo</h2><p>Outra coisa importante que devemos ter em mente quando escrevemos um programa \xE9 a indenta\xE7\xE3o do c\xF3digo. Trata-se de uma conven\xE7\xE3o de escrita de c\xF3digos-fonte que visa a modificar a est\xE9tica do programa para auxiliar a sua leitura e interpreta\xE7\xE3o.</p><div class="custom-container tip"><p class="custom-container-title">Identa\xE7\xE3o</p><p>A indenta\xE7\xE3o \xE9 o espa\xE7amento (ou tabula\xE7\xE3o) colocado antes de come\xE7ar a escrever o c\xF3digo na linha. Ela tem como objetivo indicar a hierarquia dos elementos.</p></div><p>No nosso exemplo, os comandos <code>printf()</code>, <code>system()</code> e <code>return</code> possuem a mesma hierarquia (portanto, o mesmo espa\xE7amento) e est\xE3o todos contidos dentro do comando <code>main()</code> (da\xED o porqu\xEA do espa\xE7amento).</p><p>O ideal \xE9 sempre criar um novo n\xEDvel de indenta\xE7\xE3o para um novo bloco de comandos.</p><p>A indenta\xE7\xE3o \xE9 importante, pois o nosso exemplo anterior poderia ser escrito em apenas tr\xEAs linhas, sem afetar o seu desempenho, mas com alto grau de dificuldade de leitura para o programador</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span> </span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">&quot;pause&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="entrada-e-saida-de-dados" tabindex="-1"><a class="header-anchor" href="#entrada-e-saida-de-dados" aria-hidden="true">#</a> Entrada e sa\xEDda de dados</h2><h3 id="printf" tabindex="-1"><a class="header-anchor" href="#printf" aria-hidden="true">#</a> printf</h3><p>A fun\xE7\xE3o <code>printf()</code> \xE9 uma das fun\xE7\xF5es de sa\xEDda/escrita de dados da linguagem C. Seu nome vem da express\xE3o em ingl\xEAs print formatted, ou seja, escrita formatada. Basicamente, a fun\xE7\xE3o <code>printf()</code> escreve na sa\xEDda de v\xEDdeo (tela) um conjunto de valores, caracteres e/ou sequ\xEAncia de caracteres de acordo com o formato especificado.</p><p>A forma geral da fun\xE7\xE3o <code>printf()</code> \xE9:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;tipos de sa\xEDda&quot;</span><span class="token punctuation">,</span> lista de vari\xE1veis<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A fun\xE7\xE3o <code>printf()</code> recebe dois par\xE2metros de entrada:</p><ul><li><em>&quot;tipos de sa\xEDda&quot;</em>: conjunto de caracteres que especifica o formato dos dados a serem escritos e/ou o texto a ser escrito.</li><li><em>lista de vari\xE1veis</em>: conjunto de nomes de vari\xE1veis, separados por v\xEDrgula, que ser\xE3o escritos.</li></ul><h4 id="escrevendo-valores-formatados" tabindex="-1"><a class="header-anchor" href="#escrevendo-valores-formatados" aria-hidden="true">#</a> Escrevendo valores formatados</h4><p>Quando queremos escrever dados formatados na tela usamos a forma geral da fun\xE7\xE3o, a qual possui os tipos de sa\xEDda. Eles especificam o formato de sa\xEDda dos dados que ser\xE3o escritos pela fun\xE7\xE3o <code>printf()</code>. Cada tipo de sa\xEDda \xE9 precedido por um sinal de &quot;%&quot;, e um tipo de sa\xEDda deve ser especificado para cada vari\xE1vel a ser escrita.</p><p>Assim, se quis\xE9ssemos escrever uma \xFAnica express\xE3o com o comando <code>printf()</code>, far\xEDamos</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%tipo&quot;</span><span class="token punctuation">,</span> express\xE3o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%tipo1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;%tipo2&quot;</span><span class="token punctuation">,</span> express\xE3o1<span class="token punctuation">,</span> express\xE3o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note que os formatos e as express\xF5es a serem escritas com aquele formato devem ser especificados na mesma ordem. Al\xE9m disso, as vari\xE1veis e/ou express\xE3o devem ser separadas por v\xEDrgulas.</p><table><thead><tr><th>Tipos</th><th>Sa\xEDda para o printf</th></tr></thead><tbody><tr><td>%c</td><td>escrita de um caractere (char)</td></tr><tr><td>%d ou %i</td><td>escrita de n\xFAmeros inteiros (int ou char)</td></tr><tr><td>%u</td><td>escrita de n\xFAmeros inteiros sem sinal (unsigned)</td></tr><tr><td>%f</td><td>escrita de n\xFAmero reais (float ou double)</td></tr><tr><td>%s</td><td>escrita de v\xE1rios caracteres</td></tr><tr><td>%p</td><td>escrita de um endere\xE7o de mem\xF3ria</td></tr><tr><td>%e ou %E</td><td>escrita em nota\xE7\xE3o cient\xEDfica</td></tr></tbody></table>`,38),i=[t];function c(d,r){return e(),s("div",null,i)}const l=a(o,[["render",c],["__file","04_linguagem_c.html.vue"]]);export{l as default};
